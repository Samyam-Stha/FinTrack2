@startuml FinTrack_Business_Logic_Diagram

!theme plain
skinparam classAttributeIconSize 0
skinparam classFontSize 12
skinparam classFontStyle bold
skinparam backgroundColor #FFFFFF
skinparam classBackgroundColor #E8F5E8
skinparam classBorderColor #2E7D32
skinparam arrowColor #1B5E20

title FinTrack - Business Logic Architecture

package "Core Business Entities" {
  class User {
    -id: Int
    -name: String
    -email: String
    -password: String
    --
    +register(name, email, password): Token
    +login(email, password): Token
    +updateProfile(field, value): Boolean
    +deleteAccount(): Boolean
  }

  class Transaction {
    -id: Int
    -date: DateTime
    -description: String
    -amount: Float
    -type: String
    -category: String
    -account: String
    -userId: Int
    --
    +addTransaction(data): Transaction
    +updateTransaction(id, data): Transaction
    +deleteTransaction(id): Boolean
    +getTransactionsByPeriod(startDate, endDate): Transaction[]
    +getTransactionsByCategory(category): Transaction[]
    +getTransactionsByType(type): Transaction[]
    +calculateTotalAmount(): Float
  }

  class Budget {
    -id: Int
    -budget: Float
    -userId: Int
    -categoryId: Int
    --
    +createBudget(categoryId, amount): Budget
    +updateBudget(id, amount): Budget
    +deleteBudget(id): Boolean
    +getBudgetByCategory(categoryId): Budget
    +calculateRemainingBudget(): Float
    +isOverBudget(): Boolean
    +getBudgetUtilization(): Float
  }

  class Category {
    -id: Int
    -name: String
    -account: String
    -userId: Int
    --
    +createCategory(name, account): Category
    +deleteCategory(id): Boolean
    +getCategoriesByAccount(account): Category[]
    +getCategoryByName(name): Category
  }

  class MonthlySavings {
    -id: Int
    -month: DateTime
    -amount: Float
    -userId: Int
    --
    +storeMonthlySavings(month, amount): void
    +getSavingsByMonth(month): MonthlySavings
    +updateSavings(id, amount): MonthlySavings
    +calculateTotalSavings(): Float
    +getSavingsTrend(): Object
  }
}

package "Business Logic Controllers" {
  class TransactionManager {
    --
    +addTransaction(userId, transactionData): Transaction
    +updateTransaction(userId, transactionId, data): Transaction
    +deleteTransaction(userId, transactionId): Boolean
    +getRecentTransactions(userId, limit): Transaction[]
    +getFilteredTransactions(userId, filters): Transaction[]
    +getCategoryExpenses(userId, interval): Object[]
    +getTransactionSummary(userId, period): Object
    +validateTransaction(transactionData): Boolean
  }

  class BudgetManager {
    --
    +getBudgets(userId, month): Budget[]
    +addBudget(userId, categoryId, amount): Budget
    +updateBudget(userId, budgetId, amount): Budget
    +deleteBudget(userId, budgetId): Boolean
    +calculateBudgetProgress(userId, categoryId): Object
    +checkBudgetAlerts(userId): Object[]
    +resetBudgetsForNewMonth(userId): void
    +storeMonthlyBudgetHistory(userId, month): void
  }

  class FinancialAnalytics {
    --
    +getSpendingTrends(userId, period): Object
    +getBudgetVsActual(userId, period): Object
    +getCategoryAlerts(userId): Object[]
    +getFinancialHealthScore(userId): Number
    +generateRecommendations(userId): Object[]
    +getSeasonalAnalysis(userId, year): Object
    +calculateSavingsRate(userId, period): Number
    +getExpenseBreakdown(userId, period): Object
  }

  class SavingsManager {
    --
    +getSavings(userId): MonthlySavings[]
    +addSavings(userId, amount, month): MonthlySavings
    +updateSavings(userId, savingsId, amount): MonthlySavings
    +deleteSavings(userId, savingsId): Boolean
    +calculateSavingsGoal(userId): Object
    +getSavingsProgress(userId): Object
    +storeMonthlySavings(userId, month, amount): void
  }
}

package "Authentication & Security" {
  class AuthManager {
    --
    +register(userData): Token
    +login(credentials): Token
    +updateUser(userId, field, value, currentPassword): Boolean
    +deleteAccount(userId, password): Boolean
    +verifyToken(token): User
    +hashPassword(password): String
    +comparePassword(password, hash): Boolean
  }
}

package "Real-time Communication" {
  class SocketManager {
    -socket: Socket
    --
    +connect(): void
    +disconnect(): void
    +emitTransactionAdded(userId, transaction): void
    +emitTransactionUpdated(userId, transaction): void
    +emitTransactionDeleted(userId, transactionId): void
    +onTransactionAdded(callback): void
    +onTransactionUpdated(callback): void
    +onTransactionDeleted(callback): void
    +broadcastBudgetUpdate(userId, budget): void
  }
}

' Core Business Relationships
User ||--o{ Transaction : "owns"
User ||--o{ Budget : "manages"
User ||--o{ Category : "owns"
User ||--o{ MonthlySavings : "tracks"

Category ||--o{ Budget : "categorizes"

TransactionManager --> Transaction : "manages"
TransactionManager --> User : "validates"

BudgetManager --> Budget : "manages"
BudgetManager --> Category : "uses"
BudgetManager --> User : "validates"

FinancialAnalytics --> Transaction : "analyzes"
FinancialAnalytics --> Budget : "analyzes"
FinancialAnalytics --> MonthlySavings : "analyzes"
FinancialAnalytics --> User : "provides insights"

SavingsManager --> MonthlySavings : "manages"
SavingsManager --> User : "validates"

AuthManager --> User : "authenticates"
SocketManager --> Transaction : "notifies"
SocketManager --> Budget : "notifies"

' Business Logic Flow
TransactionManager ..> FinancialAnalytics : "provides data"
BudgetManager ..> FinancialAnalytics : "provides data"
SavingsManager ..> FinancialAnalytics : "provides data"

' Notes
note top of User : "Central business entity"
note top of Transaction : "Core financial transaction"
note top of Budget : "Budget allocation & tracking"
note top of FinancialAnalytics : "Business intelligence & insights"
note top of TransactionManager : "Transaction business logic"
note top of BudgetManager : "Budget business logic"

@enduml 