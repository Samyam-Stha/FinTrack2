@startuml FinTrack_Complete_Class_Diagram

!theme plain
skinparam classAttributeIconSize 0
skinparam classFontSize 12
skinparam classFontStyle bold
skinparam backgroundColor #FFFFFF
skinparam classBackgroundColor #F8F9FA
skinparam classBorderColor #6C757D
skinparam arrowColor #495057

' Core Entity Classes
class User {
  -id: Int
  -name: String
  -email: String
  -password: String
  --
  +register(name, email, password): Token
  +login(email, password): Token
  +updateUser(field, value, currentPassword): Boolean
  +deleteAccount(password): Boolean
}

class Category {
  -id: Int
  -name: String
  -account: String
  -userId: Int
  --
  +createCategory(name, account): Category
  +deleteCategory(id): Boolean
  +getCategories(account): Category[]
}

class Budget {
  -id: Int
  -budget: Float
  -userId: Int
  -categoryId: Int
  --
  +createBudget(categoryId, amount): Budget
  +updateBudget(id, amount): Budget
  +deleteBudget(id): Boolean
  +getBudgets(month): Budget[]
  +resetBudgetsForNewMonth(): void
}

class Transaction {
  -id: Int
  -date: DateTime
  -description: String
  -amount: Float
  -type: String
  -category: String
  -account: String
  -userId: Int
  --
  +addTransaction(data): Transaction
  +updateTransaction(id, data): Transaction
  +deleteTransaction(id): Boolean
  +getRecentTransactions(): Transaction[]
  +getFilteredTransactions(filters): Transaction[]
  +getCategoryExpenses(interval): Object[]
  +getSummaryByInterval(interval): Object
}

class MonthlySavings {
  -id: Int
  -month: DateTime
  -amount: Float
  -userId: Int
  --
  +storeMonthlySavings(month, amount): void
  +getSavings(): MonthlySavings[]
  +updateSavings(id, amount): MonthlySavings
  +deleteSavings(id): Boolean
}

class MonthlyBudgetHistory {
  -id: Int
  -month: DateTime
  -category: String
  -budget: Float
  -spent: Float
  -remaining: Float
  -userId: Int
  --
  +storeMonthlyBudgetHistory(month, budgetData): void
  +getBudgetHistory(period): MonthlyBudgetHistory[]
}

' Controller Classes
class AuthController {
  --
  +register(req, res): void
  +login(req, res): void
  +updateUser(req, res): void
  +deleteAccount(req, res): void
  +verifyToken(token): User
}

class TransactionController {
  --
  +addTransaction(req, res): void
  +getRecentTransactions(req, res): void
  +getFilteredTransactions(req, res): void
  +getCategoryExpenses(req, res): void
  +updateTransaction(req, res): void
  +deleteTransaction(req, res): void
  +getSummaryByInterval(req, res): void
}

class BudgetController {
  --
  +getBudgets(req, res): void
  +addBudget(req, res): void
  +updateBudget(req, res): void
  +deleteBudget(req, res): void
  +storeMonthlySavings(userId, month, amount): void
  +storeMonthlyBudgetHistory(userId, month, budgetData): void
  +resetBudgetsForNewMonth(userId): void
}

class AnalyticsController {
  --
  +getSpendingTrends(req, res): void
  +getBudgetVsActual(req, res): void
  +getSeasonalAnalysis(req, res): void
  +getCategoryAlerts(req, res): void
  +getFinancialHealthScore(req, res): void
  +generateRecommendations(metrics, totalScore): Object[]
}

class CategoryController {
  --
  +getCategories(req, res): void
  +addCategory(req, res): void
  +deleteCategory(req, res): void
}

class SavingsController {
  --
  +getSavings(req, res): void
  +addSavings(req, res): void
  +updateSavings(req, res): void
  +deleteSavings(req, res): void
}

' Frontend Component Classes
class Dashboard {
  -transactions: Transaction[]
  -income: Number
  -expense: Number
  -balance: Number
  -savingRate: Number
  --
  +fetchTransactions(): void
  +updateDashboardStats(transactions): void
  +render(): JSX.Element
}

class AddTransactionModal {
  -form: Object
  -categories: String[]
  -newCategory: String
  -showNewCategoryInput: Boolean
  --
  +handleSubmit(): void
  +addNewCategory(): void
  +fetchCategories(): void
  +handleChange(field, value): void
  +render(): JSX.Element
}

class BudgetProgress {
  -categories: Object[]
  --
  +fetchBudget(): void
  +render(): JSX.Element
}

class ExpensePieChart {
  -data: Object[]
  -interval: String
  --
  +fetchExpenses(): void
  +render(): JSX.Element
}

class RecentTransactions {
  -transactions: Transaction[]
  --
  +fetchRecentTransactions(): void
  +render(): JSX.Element
}

class TransactionFilter {
  -filters: Object
  --
  +applyFilters(): void
  +clearFilters(): void
  +render(): JSX.Element
}

class TransactionsTable {
  -transactions: Transaction[]
  -sortBy: String
  -sortOrder: String
  --
  +sortTransactions(field): void
  +deleteTransaction(id): void
  +editTransaction(id): void
  +render(): JSX.Element
}

' Utility Classes
class Authenticate {
  --
  +verifyToken(token): User
  +middleware(req, res, next): void
}

class useAuth {
  --
  +getCurrentUser(): User
  +isAuthenticated(): Boolean
  +logout(): void
}

class formatCurrency {
  --
  +formatNPR(amount): String
  +formatUSD(amount): String
}

class SocketManager {
  -socket: Socket
  --
  +connect(): void
  +disconnect(): void
  +emitTransactionAdded(transaction): void
  +emitTransactionUpdated(transaction): void
  +emitTransactionDeleted(id): void
  +onTransactionAdded(callback): void
  +onTransactionUpdated(callback): void
  +onTransactionDeleted(callback): void
}

' Relationships
User ||--o{ Category : "has"
User ||--o{ Budget : "has"
User ||--o{ Transaction : "has"
User ||--o{ MonthlySavings : "has"
User ||--o{ MonthlyBudgetHistory : "has"

Category ||--o{ Budget : "has"

AuthController --> User : "manages"
TransactionController --> Transaction : "manages"
BudgetController --> Budget : "manages"
BudgetController --> MonthlySavings : "manages"
BudgetController --> MonthlyBudgetHistory : "manages"
AnalyticsController --> Transaction : "analyzes"
AnalyticsController --> Budget : "analyzes"
CategoryController --> Category : "manages"
SavingsController --> MonthlySavings : "manages"

Dashboard --> Transaction : "displays"
Dashboard --> Budget : "displays"
AddTransactionModal --> Transaction : "creates"
AddTransactionModal --> Category : "uses"
BudgetProgress --> Budget : "displays"
ExpensePieChart --> Transaction : "visualizes"
RecentTransactions --> Transaction : "displays"
TransactionFilter --> Transaction : "filters"
TransactionsTable --> Transaction : "manages"

Authenticate --> User : "verifies"
useAuth --> User : "manages"
SocketManager --> Transaction : "notifies"

' Notes
note top of User : "Central entity for user management"
note top of Transaction : "Core financial transaction entity"
note top of Budget : "Budget allocation per category"
note top of AnalyticsController : "Provides financial insights and reports"
note top of Dashboard : "Main user interface component"
note top of SocketManager : "Real-time updates via WebSocket"

@enduml 